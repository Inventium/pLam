-------------------------------------------
--            BINARY LIBRARY             --
--=======================================--

-- TODO wishes:
---- features   : negative numerals
---- operations : div, mod
---- fixes      : mul, mulb simplify


---------------- BOOLEANS -----------------
T = \x y. x
F = \x y. y
not = \x. x F T
and = \x y. x y F
or = \x y. x T y
or3 = \x y z. or (or x y) z
xor = \x y. x (not y) y
xor3 = \x y z. xor (xor x y) z
-------------------------------------------

-- pair operations
pair = \x y p. p x y
fst = \p. p T
snd = \p. p F

-- this represents the end of the list
end = \e. T
isEnd = \e. e (\x y. F)
-- this marks the negative result of subtraction
flagNeg = \x y. T
isFlagNeg = \z. z F F

-- Y combinator
Y = \f. (\x. f(x x)) (\x. f(x x))

-----------------------------
--    ADEQUACY - isZbin    --
--=========================--
-- test for zero
isZbin = Y (\f. \x. (isEnd x) T ((fst x) F (f (snd x))))


--------------------
--    ADDITION    --
--================--
carryA = \x y c. or (and x y) (and (or x y) c)

-- equal size addition
addB0e = Y (\f. \x y c. (isEnd x) (c (pair T end) end) (pair (xor3 (fst x) (fst y) c) (f (snd x) (snd y) (carryA (fst x) (fst y) c))))
addBe = \x y. addB0e x y F

-- variant size addition
forkA = \x y c. (and (isEnd x) (isEnd y)) (c (pair T end) end) ((isEnd x) (pair (xor3 F (fst y) c) (f end (snd y) (carryA F (fst y) c))) ((isEnd y) (pair (xor3 (fst x) F c) (f (snd x) end (carryA (fst x) F c))) (pair (xor3 (fst x) (fst y) c) (f (snd x) (snd y) (carryA (fst x) (fst y) c)))))

-- E = c (pair T end) end
-- E1 = pair (xor3 F (fst y) c) (f end (snd y) (carryA F (fst y) c))
-- E2 = pair (xor3 (fst x) F c) (f (snd x) end (carryA (fst x) F c))
-- C = pair (xor3 (fst x) (fst y) c) (f (snd x) (snd y) (carryA (fst x) (fst y) c))

addB0 = Y (\f. forkA)
addB = \x y. addB0 x y F
-------------------------------------------------

------------------------
--    SUBTRACTION    --
--====================--
carryS = \x y c. or (and (not x) y) (and (not (xor x y)) c)

-- equal size subtraction
subB0e = Y (\f. \x y c. (isEnd x) (c (pair flagNeg end) end) (pair (xor3 (fst x) (fst y) c) (f (snd x) (snd y) (carryS (fst x) (fst y) c))))
subBe = \x y. subB0e x y F

-- variant subtraction
forkS = \x y c. (and (isEnd x) (isEnd y)) (c (pair flagNeg end) end) ((isEnd x) (pair flagNeg end) ((isEnd y) (pair (xor3 (fst x) F c) (f (snd x) end (carryS (fst x) F c))) (pair (xor3 (fst x) (fst y) c) (f (snd x) (snd y) (carryS (fst x) (fst y) c)))))

-- E = (c (pair flagNeg end) end)
-- E1 = (pair flagNeg end)
-- E2 = pair (xor3 (fst x) F c) (f (snd x) end (carryS (fst x) F c))
-- C = pair (xor3 (fst x) (fst y) c) (f (snd x) (snd y) (carryS (fst x) (fst y) c))

-- trim trailing F bits
trim = Y (\f. \x. (isZbin (snd x)) (pair (fst x) end) (pair (fst x) (f (snd x))))

-- whether a binary numeral has flagNeg indicator
isNeg = Y (\f. \x. (isEnd x) F ((isFlagNeg (fst x)) T (f (snd x))))
makeZ = \x. (isNeg x) 0b x

subB0 = Y (\f. forkS)
subBf = \x y. subB0 x y F
subBt = \x y. trim (subBf x y)
subBs = \x y. trim (makeZ (subBf x y))
----------------------------------------------

-------------------------------
--    ADEQUACY - Sbin,Pbin   --
--===========================--
-- test for zero
isZbin = Y (\f. \x. (isEnd x) T ((fst x) F (f (snd x))))

-- successor
Sbin = \x. addB x 1b

-- predecessor
Pbin = \x. subBs x 1b
---------------------------------------------

-- multiplication
mulb = Y (\f. \x b. (isEnd x) end (b (pair (fst x) (f (snd x) b)) (pair F (f (snd x) b))))
shiftr = \x. pair F x
mulB0 = Y (\f. \x y s. (isEnd y) s (f x (snd y) (addB s (shiftr (mulb x (fst y))))))
mulB = \x y. mulB0 x y 0b

-- primitive recursion, version 0
--PR0 = \G H. (Y (\f k. (isZbin k) G (H k (f (PB k)))))

---------------------
-- comparisons
--===================
leqB = \m n. isZbin (subBs m n)
greB = \m n. not (leqB m n) 


